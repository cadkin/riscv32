export PROJECT_ROOT         := $(realpath $(dir $(abspath $(lastword $(MAKEFILE_LIST)))))

export RANDOM               := $(shell bash -c 'echo $$RANDOM')
export TMP_TCL_PATH         := /tmp/${USER}-vivado-$(RANDOM).tcl

export BITSTREAM_TCL        := $(PROJECT_ROOT)/scripts/vivado/bitstream.tcl
export MEM_GEN_TCL          := $(PROJECT_ROOT)/scripts/vivado/ip_gen.tcl
export MEM_GEN_CELL_TCL     := $(PROJECT_ROOT)/scripts/vivado/ip_mem_gen_cell.tcl
export MEM_COE_TCL          := $(PROJECT_ROOT)/scripts/vivado/ip_gen_coe.tcl
export MEM_COE_CELL_TCL     := $(PROJECT_ROOT)/scripts/vivado/ip_mem_gen_cell_coe.tcl
export ISIM_TCL             := $(PROJECT_ROOT)/scripts/vivado/isim.tcl
export SIM_TCL              := $(PROJECT_ROOT)/scripts/vivado/sim.tcl
export FLASH_TCL            := $(PROJECT_ROOT)/scripts/vivado/flash.tcl
export RTL_SCHEME_TCL       := $(PROJECT_ROOT)/scripts/vivado/rtl_scheme.tcl

export BUILD_DIR            := build
export CONSTR_DIR           := constr
export IP_DIR               := ip
export COE_DIR              := c

export TARGET               := riscv32_fpga.bit
export BOARD                := xc7a100tcsg324-1
export TOP                  := riscv_top
export XDC                  := riscvcore.xdc

export VIVADO               := vivado
export VIVADO_PATH          := $(shell which $(VIVADO) 2> /dev/null)
export VIVADO_FLAGS         :=

export SCREEN               := screen
export SCREEN_FLAGS         :=
export SCREEN_DEVICE        := /dev/ttyUSB1
export SCREEN_BAUD          := 115200

export MEM_CELL_NAMES       := mem_cell_0 mem_cell_1 mem_cell_2 mem_cell_3 imem_cell_0 imem_cell_1 imem_cell_2 imem_cell_3
export IP_TS                := ip_gen_timestamp.tmp

export MEM_CELL_0           := $(word 1, $(MEM_CELL_NAMES))
export MEM_CELL_1           := $(word 2, $(MEM_CELL_NAMES))
export MEM_CELL_2           := $(word 3, $(MEM_CELL_NAMES))
export MEM_CELL_3           := $(word 4, $(MEM_CELL_NAMES))
export IMEM_CELL_0          := $(word 5, $(MEM_CELL_NAMES))
export IMEM_CELL_1          := $(word 6, $(MEM_CELL_NAMES))
export IMEM_CELL_2          := $(word 7, $(MEM_CELL_NAMES))
export IMEM_CELL_3          := $(word 8, $(MEM_CELL_NAMES))

export SYNTH_CHECKPOINT     := synth.checkpoint
export IMPL_CHECKPOINT      := impl.checkpoint

export RPT_PS_TIME_SUM      := post_synth_timing_summary.rpt
export RPT_PS_POWER         := post_synth_power.rpt
export RPT_PP_TIME_SUM      := post_place_timing_summary.rpt
export RPT_PR_TIME_SUM      := post_route_timing_summary.rpt
export RPT_PR_PATH_TIME     := post_route_path_timing.rpt
export RPT_PR_CLOCK_UTIL    := post_route_clock_util.rpt
export RPT_PR_UTIL          := post_route_utilization.rpt
export RPT_PR_POWER         := post_route_power.rpt
export RPT_IMPL_DRC         := impl_drc.rpt

export VLOG_ANALYSIS        := xvlog
export VLOG_ANALYSIS_FLAGS  := --sv --relax
export VHDL_ANALYSIS        := xvhdl
export VHDL_ANALYSIS_FLAGS  := --relax
export ANALYSIS_TS          := analysis_timestamp.tmp

export ELAB                 := xelab
export ELAB_FLAGS           := --debug typical --relax
export ELAB_LIBRARIES       := -L blk_mem_gen_v8_4_4
# Defines testbench module to run for sims, can be specified at runtime via 'make sim testbench=foobar'.
export testbench            := tb_riscv_top
export ELAB_TS              := $(addprefix $(testbench),_elab_timestamp.tmp)


export COE_TS               := coe_timestamp.tmp
# Basename for loading from coe, expects $(coe_basename)0.coe - $(coe_basename)3.coe to load from $(COE_DIR). Can be modified at runtime.
export coe_basename         := ex/qsort_test
export COE_FILES            := $(addsuffix .coe,$(addprefix $(PROJECT_ROOT)/$(COE_DIR)/$(coe_basename),$(shell seq 0 3)))

export SIM                  := xsim
export SIM_FLAGS            :=
# This is default, can be specified to be longer if needed at runtime via 'make sim sim_time=XXns' or if finite 'make sim sim_time=all'.
export sim_time             := 500ns

export TB                   := $(addprefix $(PROJECT_ROOT)/, $(shell find tb/ -type f -name '*.sv'))
export PKGS                 :=
export SRC                  := $(filter-out $(PKGS),$(addprefix $(PROJECT_ROOT)/,$(shell find src/ -type f -name '*.sv')))
export VHDL_PKGS            := $(PROJECT_ROOT)/src/photon/hashpkg.vhd
export VHDL_SRC             := $(filter-out $(VHDL_PKGS),$(addprefix $(PROJECT_ROOT)/,$(shell find src/ -type f -name '*.vhd')))
export MEM_SRC              := $(addprefix $(PROJECT_ROOT)/,$(join $(addsuffix /sim/,$(addprefix $(IP_DIR)/,$(MEM_CELL_NAMES))),$(addsuffix .v,$(MEM_CELL_NAMES))))
